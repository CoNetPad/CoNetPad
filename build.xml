<project name="conetpad" default="dist" basedir=".">

  <description>
    Compiles and builds the CoNetPad project
  </description>
  
  <!-- set classpaths -->
  <path id="common.classpath">
    <fileset dir="lib">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="build/common" />
  </path>
  
  <path id="server.classpath">
    <fileset dir="lib">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="build/server" />
    <fileset dir="build/common" />
    <path refid="common.classpath"/>
    <pathelement path="build/common"/>
  </path>
  
  <path id="client.classpath">
    <fileset dir="lib">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="build/client" />
    <path refid="common.classpath"/>
    <pathelement path="build/common"/>
  </path>
  
  <path id="test.classpath">
    <fileset dir="lib">
      <include name="**/*.jar" />
      <exclude name="**/*-javadoc.jar" />
    </fileset>
    <path refid="common.classpath"/>
    <pathelement path="build/common"/>
    <path refid="client.classpath"/>
    <pathelement path="build/client"/>
    <path refid="server.classpath"/>
    <pathelement path="build/server"/>
  </path>

  <!-- initialize -->
  <target name="init" description="initialize directory structure">
    <tstamp />
    <mkdir dir="build/common" />
    <mkdir dir="build/client" />
    <mkdir dir="build/server" />
    <mkdir dir="build/test" />
    <mkdir dir="dist/client/lib" />
    <mkdir dir="dist/server/lib" />
    <mkdir dir="dist/test/lib" />
    <mkdir dir="docs/javadoc" />
  </target>
  
  <!-- compile -->
  <target name="compile" depends="init" description="compile source">
    <javac includeantruntime="false" srcdir="src/common" destdir="build/common" classpathref="common.classpath" debug="true" />
    <javac includeantruntime="false"  srcdir="src/server" destdir="build/server" classpathref="server.classpath" debug="true" />
    <javac includeantruntime="false" srcdir="src/client" destdir="build/client" classpathref="client.classpath" debug="true" />
    <javac includeantruntime="false" srcdir="src/test" destdir="build/test" classpathref="test.classpath" debug="true" />
  </target>
  
  <!-- jar class files -->
  <target name="jar" depends="compile" description="create jar files">

    <!-- jar common class files to temp directory-->
    <mkdir dir="dist/temp" />
    <jar jarfile="dist/temp/${ant.project.name}-common.jar" basedir="build/common" />
    
    <!-- copy common and lib jars to dist/client/lib directory -->
    <copy todir="dist/client/lib">
      <fileset dir="lib">
	<include name="**/*.jar" />
	<exclude name="**/*-javadoc.jar"/>
      </fileset>
    </copy>
    <copy tofile="dist/client/lib/${ant.project.name}-common.jar" 
	  file="dist/temp/${ant.project.name}-common.jar" />
    
    <!-- copy common and lib jars to dist/server/lib directory -->
    <copy todir="dist/server/lib">
      <fileset dir="lib">
	<include name="**/*.jar" />
	<exclude name="**/*-javadoc.jar"/>
      </fileset>
    </copy>
    <copy tofile="dist/server/lib/${ant.project.name}-common.jar" 
	  file="dist/temp/${ant.project.name}-common.jar" />
    
    <!-- copy common and lib jars to dist/test/lib directory -->
    <copy todir="dist/test/lib">
      <fileset dir="lib">
	<include name="**/*.jar" />
	<exclude name="**/*-javadoc.jar"/>
      </fileset>
    </copy>
    <copy tofile="dist/test/lib/${ant.project.name}-common.jar" 
	  file="dist/temp/${ant.project.name}-common.jar" />
    
    <!-- remove temp directory --> 
   <delete dir="dist/temp" />

    <!-- define client and server jar classpaths -->
    <path id="server.build.classpath">
      <fileset dir="dist/server/lib">
	<include name="**/*.jar"/>
      </fileset>
    </path>
    
    <path id="client.build.classpath">
      <fileset dir="dist/client/lib">
	<include name="**/*.jar"/>
      </fileset>
    </path>
    
    <!-- jar server class files -->
    <manifestclasspath property="server.lib" jarfile="dist/server/${ant.project.name}-server.jar">
      <classpath refid="server.build.classpath"/>
    </manifestclasspath>  

    <jar jarfile="dist/server/${ant.project.name}-server.jar" basedir="build/server" >
      <manifest>
        <attribute name="Main-Class" value="org.ndacm.acmgroup.cnp.CNPServer" />
	<attribute name="Class-Path" value="${server.lib}"/>
      </manifest>
    </jar>
    
    <!-- jar client class files -->
    <manifestclasspath property="client.lib" jarfile="dist/client/${ant.project.name}-client.jar">
      <classpath refid="client.build.classpath"/>
    </manifestclasspath>  
    
    <jar jarfile="dist/client/${ant.project.name}-client.jar" basedir="build/client" >
      <manifest>
        <attribute name="Main-Class" value="org.ndacm.acmgroup.cnp.gui.ServerConnectionDialog" />
	<attribute name="Class-Path" value="${client.lib}"/>
      </manifest>
    </jar>
    
    <!-- define client and server jar classpaths -->
    <path id="test.build.classpath">
      <fileset dir="dist/test/lib">
	<include name="**/*.jar"/>
      </fileset>
    </path>
    
    <!-- copy server and client jars to dist/test/lib directory -->
    <copy tofile="dist/test/lib/${ant.project.name}-server.jar" 
	  file="dist/server/${ant.project.name}-server.jar" />
    <copy tofile="dist/test/lib/${ant.project.name}-client.jar"
	  file="dist/client/${ant.project.name}-client.jar" />
    
    <!-- jar test class files -->
    <manifestclasspath property="test.lib" jarfile="dist/test/${ant.project.name}-test.jar">
      <classpath refid="test.build.classpath"/>
    </manifestclasspath>  
    
    <jar jarfile="dist/test/${ant.project.name}-test.jar" basedir="build/test" >
      <manifest>
        <attribute name="Main-Class" value="org.ndacm.acmgroup.cnp.CNPTestRunner" />
	<attribute name="Class-Path" value="${test.lib}"/>
      </manifest>
    </jar>
  </target>

  <!-- copy resources into client, server, and test dist directories -->
  <target name="dist" depends="jar" description="generate the distribution">

    <!-- copy database to server and test dist directories-->
    <copy todir="dist/server/data">
      <fileset dir="data">
	<exclude name="**/*.exe"/>
      </fileset>
    </copy>
    
    <copy todir="dist/test/data">
      <fileset dir="data">
	<exclude name="**/*.exe"/>
      </fileset>
    </copy>

    <!-- zip all of dist -->
    <zip basedir="dist" destfile="dist/${ant.project.name}-${DSTAMP}.zip" excludes="${ant.project.name}-*.zip" />
  </target>
  
  <!-- run junit tests -->
  <target name="test" depends="dist">

    <!-- define the junit testing classpath -->
    <path id="junit.classpath">
      <pathelement location="lib/junit-4.10.jar" />
      <pathelement location="lib/forms-1.3.0.jar" />
      <pathelement location="lib/jgit-2.1.0.201209190230-r/org.eclipse.jgit-2.1.0.201209190230-r.jar" />
      <pathelement location="lib/ropes-1.2.5/ropes.jar" />
      <pathelement location="lib/sqlite-jdbc-3.7.2/sqlite-jdbc-3.7.2.jar" />
      <pathelement location="build/test" />
      <pathelement location="build/client" />
      <pathelement location="build/common" />
      <pathelement location="build/server" />
    </path>

    <!-- run tests and print results -->
    <junit printsummary="on" fork="true" haltonfailure="no">
      <classpath refid="junit.classpath" />
      <formatter type="brief" usefile="false" />
      <test name="org.ndacm.acmgroup.cnp.CNPTestSuite" />
    </junit>
  </target>

  <!-- generate javadoc -->
  <target name="doc" depends="init" description="generate documentation">

    <!-- delete prev javadoc -->
    <delete includeemptydirs="true">
      <fileset dir="docs/javadoc" includes="**/*"/>
    </delete>

    <!-- create temp directory for all source -->
    <mkdir dir="docs/javadoc_temp" />
    <copy todir="docs/javadoc_temp">
      <fileset dir="src/test" includes="**/*.java"/>
      <fileset dir="src/client" includes="**/*.java"/>
      <fileset dir="src/server" includes="**/*.java"/>
      <fileset dir="src/common" includes="**/*.java"/>
    </copy>

    <!-- create javadoc -->
    <javadoc packagenames="org.ndacm.acmgroup.cnp*" sourcepath="docs/javadoc_temp" destdir="docs/javadoc"/>
    
    <!-- delete temp directory -->
    <delete dir="docs/javadoc_temp"/>

  </target>

  <!-- clean up -->
  <target name="clean" description="delete ${build} and ${dist} directories -->">
    <delete dir="build"/>
    <delete dir="dist" />
  </target>

</project>
